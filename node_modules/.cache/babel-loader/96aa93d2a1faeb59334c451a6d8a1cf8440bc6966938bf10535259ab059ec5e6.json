{"ast":null,"code":"\"use client\";\n\nimport React, { useMemo } from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Select from '../../select';\nimport { ColorFormat } from '../interface';\nimport ColorAlphaInput from './ColorAlphaInput';\nimport ColorHexInput from './ColorHexInput';\nimport ColorHsbInput from './ColorHsbInput';\nimport ColorRgbInput from './ColorRgbInput';\nconst selectOptions = [ColorFormat.hex, ColorFormat.hsb, ColorFormat.rgb].map(format => ({\n  value: format,\n  label: format.toLocaleUpperCase()\n}));\nconst ColorInput = props => {\n  const {\n    prefixCls,\n    format,\n    value,\n    disabledAlpha,\n    onFormatChange,\n    onChange,\n    disabledFormat\n  } = props;\n  const [colorFormat, setColorFormat] = useMergedState(ColorFormat.hex, {\n    value: format,\n    onChange: onFormatChange\n  });\n  const colorInputPrefixCls = `${prefixCls}-input`;\n  const handleFormatChange = newFormat => {\n    setColorFormat(newFormat);\n  };\n  const steppersNode = useMemo(() => {\n    const inputProps = {\n      value,\n      prefixCls,\n      onChange\n    };\n    switch (colorFormat) {\n      case ColorFormat.hsb:\n        return /*#__PURE__*/React.createElement(ColorHsbInput, Object.assign({}, inputProps));\n      case ColorFormat.rgb:\n        return /*#__PURE__*/React.createElement(ColorRgbInput, Object.assign({}, inputProps));\n      // case ColorFormat.hex:\n      default:\n        return /*#__PURE__*/React.createElement(ColorHexInput, Object.assign({}, inputProps));\n    }\n  }, [colorFormat, prefixCls, value, onChange]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${colorInputPrefixCls}-container`\n  }, !disabledFormat && (/*#__PURE__*/React.createElement(Select, {\n    value: colorFormat,\n    variant: \"borderless\",\n    getPopupContainer: current => current,\n    popupMatchSelectWidth: 68,\n    placement: \"bottomRight\",\n    onChange: handleFormatChange,\n    className: `${prefixCls}-format-select`,\n    size: \"small\",\n    options: selectOptions\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: colorInputPrefixCls\n  }, steppersNode), !disabledAlpha && (/*#__PURE__*/React.createElement(ColorAlphaInput, {\n    prefixCls: prefixCls,\n    value: value,\n    onChange: onChange\n  })));\n};\nexport default ColorInput;","map":{"version":3,"names":["React","useMemo","useMergedState","Select","ColorFormat","ColorAlphaInput","ColorHexInput","ColorHsbInput","ColorRgbInput","selectOptions","hex","hsb","rgb","map","format","value","label","toLocaleUpperCase","ColorInput","props","prefixCls","disabledAlpha","onFormatChange","onChange","disabledFormat","colorFormat","setColorFormat","colorInputPrefixCls","handleFormatChange","newFormat","steppersNode","inputProps","createElement","Object","assign","className","variant","getPopupContainer","current","popupMatchSelectWidth","placement","size","options"],"sources":["C:/Users/rexrt/Downloads/hsecspromo/HSECSPromotion/node_modules/antd/es/color-picker/components/ColorInput.js"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useMemo } from 'react';\r\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\r\nimport Select from '../../select';\r\nimport { ColorFormat } from '../interface';\r\nimport ColorAlphaInput from './ColorAlphaInput';\r\nimport ColorHexInput from './ColorHexInput';\r\nimport ColorHsbInput from './ColorHsbInput';\r\nimport ColorRgbInput from './ColorRgbInput';\r\nconst selectOptions = [ColorFormat.hex, ColorFormat.hsb, ColorFormat.rgb].map(format => ({\r\n  value: format,\r\n  label: format.toLocaleUpperCase()\r\n}));\r\nconst ColorInput = props => {\r\n  const {\r\n    prefixCls,\r\n    format,\r\n    value,\r\n    disabledAlpha,\r\n    onFormatChange,\r\n    onChange,\r\n    disabledFormat\r\n  } = props;\r\n  const [colorFormat, setColorFormat] = useMergedState(ColorFormat.hex, {\r\n    value: format,\r\n    onChange: onFormatChange\r\n  });\r\n  const colorInputPrefixCls = `${prefixCls}-input`;\r\n  const handleFormatChange = newFormat => {\r\n    setColorFormat(newFormat);\r\n  };\r\n  const steppersNode = useMemo(() => {\r\n    const inputProps = {\r\n      value,\r\n      prefixCls,\r\n      onChange\r\n    };\r\n    switch (colorFormat) {\r\n      case ColorFormat.hsb:\r\n        return /*#__PURE__*/React.createElement(ColorHsbInput, Object.assign({}, inputProps));\r\n      case ColorFormat.rgb:\r\n        return /*#__PURE__*/React.createElement(ColorRgbInput, Object.assign({}, inputProps));\r\n      // case ColorFormat.hex:\r\n      default:\r\n        return /*#__PURE__*/React.createElement(ColorHexInput, Object.assign({}, inputProps));\r\n    }\r\n  }, [colorFormat, prefixCls, value, onChange]);\r\n  return /*#__PURE__*/React.createElement(\"div\", {\r\n    className: `${colorInputPrefixCls}-container`\r\n  }, !disabledFormat && (/*#__PURE__*/React.createElement(Select, {\r\n    value: colorFormat,\r\n    variant: \"borderless\",\r\n    getPopupContainer: current => current,\r\n    popupMatchSelectWidth: 68,\r\n    placement: \"bottomRight\",\r\n    onChange: handleFormatChange,\r\n    className: `${prefixCls}-format-select`,\r\n    size: \"small\",\r\n    options: selectOptions\r\n  })), /*#__PURE__*/React.createElement(\"div\", {\r\n    className: colorInputPrefixCls\r\n  }, steppersNode), !disabledAlpha && (/*#__PURE__*/React.createElement(ColorAlphaInput, {\r\n    prefixCls: prefixCls,\r\n    value: value,\r\n    onChange: onChange\r\n  })));\r\n};\r\nexport default ColorInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}